import React, { useState } from "react";
import { Formik } from "formik";
import { useNavigate } from "react-router";
import { Link } from "react-router-dom";
import axiosInstance from "src/services/axios";
import { setCookie } from "src/utils/Cookies";
import { sha256 } from "js-sha256";
// import { sha224 } from "js-sha256";
import "./style.scss";
import { avatars, checkIcon, uploadIcon } from "src/data/assets";
import { updateUser } from "src/services/firebase";
import { useAuth } from "src/hooks/useAuth";
import PrivacyMessageModal from "src/components/PrivacyModalPopup/Index";
import TermMessageModal from "src/components/TermsModalPopup";

import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { extras } from "src/data/constants";

const SecondSignupScreen = () => {
   const navigate = useNavigate();
   const [avatar, setAvatar] = useState(1);
   const [value, setValue] = useState("");
   const [images, setImages] = useState("");
   const { auth } = useAuth();
   const [privacyPopup, setPrivacyPopup] = useState(false);
   const [terms, setTerms] = useState(false);
   const [userNameExist, setUserNameExist] = useState(false);
   const [loading, setLoading] = useState(false);

   const handleprivacy = (event) => {
      event.preventDefault();
      setPrivacyPopup(true);
      // console.log(infoPopup)
   };

   const handleterms = (event) => {
      event.preventDefault();
      setTerms(true);
      // console.log(infoPopup)
   };

   const handleAvatarUpdate = (id) => setAvatar(id);
   const handleChangeUser = (event) => {
      setValue(event.target.value);
   };
   const AvatarSrc = (no) => {
      var s = no.split("_")[1];
      var imageNo = s.split(".")[0];
      setImages(imageNo);
      console.log("part", imageNo);
   };

   // const url = window.location.href.includes;

   const handleFormSubmit = async (values, setSubmitting) => {
      // setUserNameExist(false);
      setLoading(true);
      let email = window.localStorage.getItem("register");
      let data = window.localStorage.getItem("data");
      // let data = window.localStorage.getItem('appId')
      let device = sha256(JSON.parse(data).appid + "+" + email);
      // let device = sha256(data + '+' + email)
      // let device = window.localStorage.getItem('deviceId')
      let action = {
         action: "register",
         device: device,
         email: email,
         terms: 1,
         privacy: 1,
         marketing: 1,
         username: values.name,
         avatar: images ? images : 1,
         private: values.private ? 1 : 0,
         handle: values.name,
      };

      setTimeout(() => {
         axiosInstance
            .post("/members/", action)
            .then(async (response) => {
               // setErrors({ email: 'This is a dummy procedure error' });
               let data = response.data;
               if (data.status === "exists") {
                  // setErrors({ email: 'Email already exists' });
               } else {
                  // window.sessionStorage.setItem('register', values.email)
               }
               // setCookie("isLoggedIn", device, 30);

               // Update username if given
               if (
                  values.name &&
                  values.name !== auth.username &&
                  auth.userId !== ""
               )
                  await updateUser(auth.userId, {
                     email,
                     username: values.name,
                     avatar: images ? images : 1,
                  });

               setCookie("isLoggedIn", email, 30);
               navigate("/SecondSignupScreen");
               setLoading(false);
               // navigate("/TermsandConditions");
            })
            .catch(function (error) {
               // console.log(error);
               toast.error("UserName Already Exist!");
               setUserNameExist(true);
               setLoading(false);
            });
         // alert(JSON.stringify(values, null, 2));
         setSubmitting(false);
      }, 400);
   };

   // const notify = () => toast("UserName Already Exist!");

   return (
      <Formik
         initialValues={{
            termsofexperience: false,
            privacypolicy: false,
            unsubscribe: false,
         }}
         validate={(values) => {
            const errors = {};
            if (!values.name) {
               errors.name = "Username can't be Empty";
            } else if (!values.termsofexperience) {
               errors.termsofexperience =
                  "Please check the Terms of Experience";
            }
            // else if (!values.privacypolicy) {
            //    errors.privacypolicy = "Please check the Privacy Policy";
            // }
            return errors;
         }}
         onSubmit={async (values, { setSubmitting, setErrors }) => {
            await handleFormSubmit(values, setSubmitting);
         }}
      >
         {({
            values,
            errors,
            touched,
            handleChange,
            handleBlur,
            handleSubmit,
            isSubmitting,
         }) => (
            <form onSubmit={handleSubmit}>
               <div
                  className={
                     loading
                        ? "welcome-us main-loader spinner-loads"
                        : "welcome-us main-loader"
                  }
               >
                  <div className="app_loader">
                     <img src={extras.mainLogo} alt="" className="img-fluid" />
                  </div>

                  <div className="place-market-dash">
                     <h6 className="red">Welcome to Daily Market Dash.</h6>
                     <p className="stock-content">
                        You have now joined the most exciting stock market
                        competition online where you use our money to build your
                        own portfolio based on your special skills, and your
                        market knowledge. Every day, you will be competing for
                        the Daily Prize. If you are really awesome you might be
                        invited to the head-to-head competition with even more
                        chances to win!
                     </p>
                     <p className="stock-content last">
                        Do you want to complete your account setup at this time?
                        This is optional, and you can complete this information
                        at a later time.
                     </p>
                     <form className="termsofusers">
                        <input
                           type="text"
                           name="name"
                           placeholder="Username"
                           className="form-control"
                           onChange={handleChange}
                           value={values.name}
                        />
                        {userNameExist === true && <ToastContainer />}
                        {/*<span className="form-error form-error-user">
                           {errors.name && errors.name}
         </span>*/}
                        <label className="wish">
                           I wish to keep my username and avatar private
                           <input
                              type="checkbox"
                              name="private"
                              value="false"
                           />
                           <span className="checkmark"></span>
                        </label>
                        <label>Pick your avatar</label>
                     </form>
                     <div
                        className="private-avatar"
                        style={{ marginBottom: "15px" }}
                     >
                        <div className="avatar-wrapper">
                           {avatars.map((item) => (
                              <div
                                 onClick={() => {
                                    handleAvatarUpdate(item.id);
                                    AvatarSrc(item.src);
                                 }}
                                 key={`${item.id}-id`}
                                 className={`${item.id === avatar ? "active" : ""
                                    }`}
                              >
                                 <img src={item.src} alt="Avatar" />
                                 <span className="over-icon">
                                    <img
                                       src={
                                          item.id === avatar
                                             ? checkIcon
                                             : uploadIcon
                                       }
                                       alt=""
                                    />
                                 </span>
                              </div>
                           ))}
                        </div>
                     </div>
                     <label className="container">
                        I have read and agree to the{" "}
                        <Link
                           to=""
                           className="conditonal-links"
                           onClick={handleterms}
                        >
                           Terms of Experience
                        </Link>
                        {/* <a href="#" onClick={handleInfo} className="conditonal-links">Terms of Experience</a> */}
                        <input
                           type="checkbox"
                           name="termsofexperience"
                           value={values.termsofexperience}
                           onChange={handleChange}
                           onBlur={handleBlur}
                           checked={values.termsofexperience}
                        />
                        <span className="checkmark" />
                        <span className="form-error">
                           {errors.termsofexperience &&
                              touched.termsofexperience &&
                              errors.termsofexperience}
                        </span>
                     </label>
                     <label className="container">
                        I have read and agree to the{" "}
                        <Link
                           to=""
                           className="conditonal-links"
                           onClick={handleprivacy}
                        >
                           Privacy Policy
                        </Link>
                        <input
                           type="checkbox"
                           name="privacypolicy"
                           value={values.privacypolicy}
                           onChange={handleChange}
                           onBlur={handleBlur}
                           checked={values.privacypolicy}
                        />
                        <span className="checkmark" />
                        <span className="form-error">
                           {errors.privacypolicy &&
                              touched.privacypolicy &&
                              errors.privacypolicy}
                        </span>
                     </label>
                     <label className="container">
                        I agree to have Daily Market Dash send me informational
                        messages from time-to-time. I understand I can
                        unsubscribe to these at any time.
                        <input
                           type="checkbox"
                           name="unsubscribe"
                           value={values.unsubscribe}
                           onChange={handleChange}
                           onBlur={handleBlur}
                           checked={values.unsubscribe}
                        />
                        <span className="checkmark" />
                        <span className="form-error">
                           {errors.unsubscribe &&
                              touched.unsubscribe &&
                              errors.unsubscribe}
                        </span>
                     </label>
                  </div>
                  <button
                     type="submit"
                     disabled={isSubmitting}
                     className="dmd-btn"
                  // onClick={notify}
                  >
                     Continue
                  </button>
                  <div className="terms-policy">
                     <ul>
                        <li>
                           <Link to="/Terms" target="_blank">
                              Terms
                           </Link>
                        </li>
                        <li>
                           <Link to="/Privacy" target="_blank">
                              Privacy
                           </Link>
                        </li>
                     </ul>
                  </div>
               </div>
               {privacyPopup === true && (
                  <PrivacyMessageModal CloseModel={setPrivacyPopup} />
               )}

               {terms && <TermMessageModal CloseModel={setTerms} />}
            </form>
         )}
      </Formik>
   );
};

export default SecondSignupScreen;
